Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.

Java Solution:
class Solution {
    public String minWindow(String s, String t) {

        int[] arr= new int[128];

        char[] s_arr=s.toCharArray();
        char[] t_arr=t.toCharArray();


        for(char c:t_arr)
        {
            arr[c]++;

        }

        int L=0, R=0,counter=0;
        int min=Integer.MAX_VALUE;
        String ans="";

        while(R<s_arr.length)
        {
            char curr_char=s_arr[R];
            //expand window
            if(--arr[curr_char]>=0)
            {
                counter++;
            }
            //shrink the window
            while(counter==t_arr.length)
            {
                int currentwindow=R-L+1;
                if(currentwindow<min)
                {
                   
                    min=currentwindow;
                    ans=s.substring(L,R+1);
                    
                }
                char letfchar=s_arr[L];
                if(++arr[letfchar]>0) counter--;
                L++;
            }

        R++;
    }


        return ans;
    }
}
 