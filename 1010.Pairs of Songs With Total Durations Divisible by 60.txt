Problem Statement:
You are given a list of songs where the ith song has a duration of time[i] seconds.

Return the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.

 

Example 1:

Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60
Example 2:

Input: time = [60,60,60]
Output: 3
Explanation: All three pairs have a total duration of 120, which is divisible by 60.
 

Constraints:

1 <= time.length <= 6 * 104
1 <= time[i] <= 500

Java Solution:
class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        
        int count=0;
        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        int rem[]=new int[time.length];

        for(int i=0;i<time.length;i++)
        {
            rem[i]=time[i]%60;
        }

        for(int i=0;i<rem.length;i++)
        {
            if(!map.containsKey(rem[i]))
            {
                map.put(rem[i],1);

            }
            else
            {
                map.put(rem[i],map.get(rem[i])+1);
            }
        }
        Set<Integer> keys=map.keySet();
        for(int k:keys)
        {
            
            if(k>0 && k<30)
            {
                int diff=60-k;
                if(map.containsKey(diff)) count+=map.get(k)*map.get(diff);
            }
            if(k==0 || k==30)
            {
               int n=map.get(k);
               count+= (int)((long)n*(n-1)/2);
            }
        }


    return count;
     } 

    }
